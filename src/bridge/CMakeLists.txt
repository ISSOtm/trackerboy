
# project for the C to Nim bridge, for calling Nim code from C/C++

project(bridge CXX)

find_package(Nim REQUIRED)
set(NIMBLE_DIR "${CMAKE_CURRENT_BINARY_DIR}/nimble")

execute_process(
    COMMAND "${NIM}" e "${CMAKE_CURRENT_SOURCE_DIR}/configure.nims" "${NIMBLE}" "${NIMBLE_DIR}"
    WORKING_DIRECTORY "${CMAKE_CURRENT_BINARY_DIR}"
)

set(BRIDGE_PASSC "")
set(BRIDGE_PASSL "")
set(BRIDGE_LTO "")

# Nim should use the same compiler as cmake
if (CMAKE_CXX_COMPILER_ID STREQUAL "MSVC")
    set(BRIDGE_CC "vcc")
    list(APPEND BRIDGE_PASSC ${MSVC_RUNTIME})
elseif (CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
    set(BRIDGE_CC "gcc")
elseif (CMAKE_CXX_COMPILER_ID MATCHES "Clang")
    # Clang or AppleClang
    set(BRIDGE_CC "clang")
else ()
    # unknown compiler family, might want to abort here
    # or provide your own compiler config (see nim.cfg)
    message(FATAL_ERROR "unknown compiler, manual configuration required")
endif ()

set(BRIDGE_LTO "")
if (NOT DEBUG_BUILD)
    # LTO, note: -d:lto doesn't work on OSX
    if (APPLE)
        list(APPEND BRIDGE_PASSC -flto)
    else ()
        set(BRIDGE_LTO "switch \"define\", \"lto\"")
    endif ()
endif ()

set(BRIDGE_LIB "${CMAKE_STATIC_LIBRARY_PREFIX}bridge${CMAKE_STATIC_LIBRARY_SUFFIX}")
set(BRIDGE_LIB_PATH "${CMAKE_CURRENT_BINARY_DIR}/${BRIDGE_LIB}")

set(BRIDGE_MODULE "bridge.nim")
set(BRIDGE_DEPS "NimRef.hpp" "NimRef.cpp")
set(BRIDGE_NIMCACHE "${CMAKE_CURRENT_BINARY_DIR}/nimcache")

# pass these so we can interface with Qt
get_target_property(BRIDGE_DEFINES Qt5::Widgets INTERFACE_COMPILE_DEFINITIONS)
get_target_property(BRIDGE_INCLUDES Qt5::Widgets INTERFACE_INCLUDE_DIRECTORIES)

# configure config.nims
set(CONFIG_WARNING "# DO NOT EDIT! FILE WAS GENERATED BY CMAKE\n# Edit config.nims.in instead")
configure_file(config.nims.in "cmakeconfig.nim" @ONLY)

# build the library via nimble
add_custom_command( 
    OUTPUT "${BRIDGE_LIB_PATH}"
    COMMAND "${NIMBLE}" --nimbleDir:"${NIMBLE_DIR}" cpp -p:"${CMAKE_CURRENT_BINARY_DIR}" "${BRIDGE_MODULE}"
    DEPENDS "${BRIDGE_MODULE}" "${BRIDGE_DEPS}" config.nims.in bridge.nimble
    WORKING_DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}"
)
add_custom_target(
    nimbuild 
    DEPENDS "${BRIDGE_LIB_PATH}"
    COMMENT "Building Nim bridge"
)

add_library(bridge STATIC IMPORTED GLOBAL)
set_target_properties(bridge PROPERTIES IMPORTED_LOCATION "${BRIDGE_LIB_PATH}")

add_dependencies(bridge nimbuild)
